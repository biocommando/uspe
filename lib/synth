# Adds a simple polyphonic synthetized sequence to the playlist.
# Also provides an arpeggiator
# Usage:
# add_synth <preset_json_filename> <sequence>
# The format of the sequence:
# <note_num>-<note_length>,<note_num>-<note_length>,...@<position>;...
# note_num can be alternatively a letter with octave number, like a#2 (case insensitive)
#
# arpeggiator <preset_json_filename> <notes> <optional: note_length, default: 2> <optional: gate_length, default: 1> <optional: repetitions, default: 1>
# notes is a comma separated list of notes

part add_synth:
    script;
        const jsonTimeStamps = fs.readdirSync('lib').filter(x => x.match(/^synth-.*\.json$/)).map(x => x+';'+fs.statSync('lib/'+x).mtimeMs).join(',');
        const s = require('$1');
        const paramsStr = '$range(2-99 ;sep-735c0020-2db6-473e-b9eb-b27613896a97)';
        let allParams = paramsStr.split(';sep-735c0020-2db6-473e-b9eb-b27613896a97');
        let endMarkerPos = 0;
        const set_endMarkerPos = p => endMarkerPos = p;
        let synth;
        if (s.hasOnEvent && allParams.find(x => x.startsWith('seq='))) {
            const ssw = requirelib('synth-seq-wrapper');
            const seq = allParams.find(x => x.startsWith('seq=')).substr(4);
            allParams = allParams.filter(x => !x.startsWith('seq='));
            const synthObj = s.synthCreatorWrapper(allParams, g.tempo, g.sample_rate, set_endMarkerPos);
            synth = ssw.getSequencedEventSender(seq, g.tempo, g.sample_rate, synthObj, set_endMarkerPos);
        } else {
            synth = s.synthCreatorWrapper(allParams, g.tempo, g.sample_rate, set_endMarkerPos);
        }
        let preset = '';
        if (synth.setPreset && allParams.find(x => x.startsWith('preset='))) {
            const file = allParams.find(x => x.startsWith('preset=')).replace('preset=', '');
            const preset = fs.readFileSync(file).toString();
            const json = JSON.parse(preset);
            synth.setPreset(json);
        }
        setCacheStatus([fs.statSync('$1').mtimeMs, fs.statSync('./lib/translate-note.js').mtimeMs, jsonTimeStamps, preset]);
        synths.push(synth);
        return SILENCE_FILE + ' ' + endMarkerPos;
    script_end;
    
part arpeggiator:
    script;
        const seq = [];
        const paramsStr = '$range(3-99 ;sep-735c0020-2db6-473e-b9eb-b27613896a97)';
        const namedParams = requirelib('named-params');
        let allParams = paramsStr.split(';sep-735c0020-2db6-473e-b9eb-b27613896a97');
        allParams = namedParams.parse(allParams);
        const noteLength = allParams.notelen !== undefined ? Number(allParams.notelen) : 2;
        const gateLength = allParams.gate !== undefined ? Number(allParams.gate) : 1;
        const repetitions = allParams.repeat !== undefined ? Number(allParams.repeat) : 1;
        delete allParams.notelen;
        delete allParams.gate;
        delete allParams.repeat;
        const notes = '$2'.split(',').map(n => n + '-' + gateLength);
        for (let i = 0; i < repetitions; i++) {
            seq.push(...notes.map((n, j) => n + '@' + ((i * notes.length + j) * noteLength)));
        }
        return 'add_synth $1 seq=' + seq.join(';') + ' ' + namedParams.stringify(allParams);
    script_end;
